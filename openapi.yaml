openapi: 3.0.0
info:
  title: Duel API
  description: API for managing duels between heroes
  version: 1.0.0
servers:
  - url: http://localhost:8000
paths:
  /heroes:
    get:
      summary: Get all heroes or search heroes by attribute
      parameters:
        - name: id
          in: query
          schema:
            type: integer
        - name: name
          in: query
          schema:
            type: string
        - name: life
          in: query
          schema:
            type: integer
        - name: attack
          in: query
          schema:
            type: integer
        - name: defense
          in: query
          schema:
            type: integer
        - name: itemsId
          in: query
          schema:
            type: array
            items:
              type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Hero'
              example:
                value:
                  - id: 1
                    name: "Gandalf"
                    life: 100,
                    attack: 80,
                    defense: 60,
                    itemsId: [1]
                  - id: 2
                    name: "Aragorn"
                    life: 120
                    attack: 90
                    defense: 70
                    itemsId: [2]
                  - id: 3
                    name": "Legolas"
                    life: 80
                    attack: 100
                    defense: 50
                    itemsId: [3, 5]
                  - id: 4
                    name": "Gimli"
                    life: 90
                    attack: 70
                    defense": 90
                    itemsId: [4]
                  - id: 5
                    name: "Frodo"
                    life: 60
                    attack: 50
                    defense: 40
                    itemsId: []
    post:
      summary: Create a new hero
      parameters:
        - name: name
          in: query
          schema:
            type: string
        - name: life
          in: query
          schema:
            type: integer
        - name: attack
          in: query
          schema:
            type: integer
        - name: defense
          in: query
          schema:
            type: integer
        - name: itemsId
          in: query
          schema:
            type: array
            items:
              type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HeroInput'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Hero'
  /heroes/{id}:
    get:
      summary: Get an hero by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Hero'
        '404':
          description: Not Found
    put:
      summary: Update an hero by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
        - name: name
          in: query
          schema:
            type: string
        - name: life
          in: query
          schema:
            type: integer
        - name: attack
          in: query
          schema:
            type: integer
        - name: defense
          in: query
          schema:
            type: integer
        - name: itemsId
          in: query
          schema:
            type: array
            items:
              type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HeroInput'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Hero'
        '404':
          description: Not Found
    delete:
      summary: Delete an hero by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: No Content
        '404':
          description: Not Found
  /items:
    get:
      summary: Get all items or search items by attribute
      parameters:
        - name: id
          in: query
          schema:
            type: integer
        - name: name
          in: query
          schema:
            type: string
        - name: attack
          in: query
          schema:
            type: integer
        - name: defense
          in: query
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Item'
              example:
                value:
                  - id: 1
                    name: "Sword of the Witch King"
                    attack: 20
                    defense: 0
                  - id: 2
                    name: "Shield of Gondor"
                    attack: 0
                    defense: 20
                  - id: 3
                    name: "Bow of Galadriel"
                    attack: 30
                    defense: 10
                  - id: 4
                    name: "Axe of Durin"
                    attack: 10
                    defense: 30
                  - id: 5
                    name: "Sword of Legolas"
                    attack: 25
                    defense: 0
    post:
      summary: Create a new item
      parameters:
        - name: name
          in: query
          schema:
            type: string
        - name: attack
          in: query
          schema:
            type: integer
        - name: defense
          in: query
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ItemInput'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
  /items/{id}:
    get:
      summary: Get an item by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
        '404':
          description: Not Found
    put:
      summary: Update an item by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
        - name: name
          in: query
          schema:
            type: string
        - name: attack
          in: query
          schema:
            type: integer
        - name: defense
          in: query
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ItemInput'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
        '404':
          description: Not Found
    delete:
      summary: Delete an item by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: No Content
        '404':
          description: Not Found
  /duels:
    get:
      summary: Get all duels
      parameters:
        - name: id
          in: query
          schema:
            type: integer
        - name: date
          in: query
          schema:
            type: string
        - name: champions
          in: query
          schema:
            type: integer
        - name: winnerId
          in: query
          schema:
            type: array
            items:
              type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Duel'
              example:
                value:
                  - id: 1
                    date: "2023-04-01"
                    championId: 3
                    championId2: 1
                    winnerId: 3
                  - id: 2
                    date: "2023-03-30"
                    championId: 2
                    championId2: 5
                    winnerId: 2
                  - id: 3
                    date: "2023-03-27"
                    championId: 4
                    championId2: 1
                    winnerId: 4
    post:
      summary: Create a new duel
      parameters:
        - name: date
          in: query
          schema:
            type: string
        - name: champions
          in: query
          schema:
            type: integer
        - name: winnerId
          in: query
          schema:
            type: array
            items:
              type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DuelInput'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Duel'
  /duels/{id}:
    get:
      summary: Get a duel by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Duel'
        '404':
          description: Not Found
    put:
      summary: Update a duel by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
        - name: date
          in: query
          schema:
            type: string
        - name: champions
          in: query
          schema:
            type: integer
        - name: winnerId
          in: query
          schema:
            type: array
            items:
              type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DuelInput'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Duel'
        '404':
          description: Not Found
    delete:
      summary: Delete a duel by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: No Content
        '404':
          description: Not Found
components:
  schemas:
    Hero:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        life:
          type: integer
        attack:
          type: integer
        defense:
          type: integer
        itemsId:
          type: array
          items:
            type: integer
      required:
        - id
        - name
        - life
        - attack
        - defense
        - itemsId
    HeroInput:
      type: object
      properties:
        name:
          type: string
        life:
          type: integer
        attack:
          type: integer
        defense:
          type: integer
        itemsId:
          type: array
          items:
            type: integer
      required:
        - name
        - life
        - attack
        - defense
        - itemsId
      additionalProperties: false
    Item:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        attack:
          type: integer
        defense:
          type: integer
      required:
        - id
        - name
        - attack
        - defense
      additionalProperties: false
    ItemInput:
      type: object
      properties:
        name:
          type: string
        attack:
          type: integer
        defense:
          type: integer
      required:
        - name
        - attack
        - defense
      additionalProperties: false
    Duel:
      type: object
      properties:
        id:
          type: integer
        date:
          type: string
          format: date-time
        championId1:
          type: integer
        championId2:
          type: integer
        winnerId:
          type: integer
      required:
        - id
        - date
        - championId1
        - championId2
      additionalProperties: false
    DuelInput:
      type: object
      properties:
        date:
          type: string
          format: date-time
        championId1:
          type: integer
        championId2:
          type: integer
        winnerId:
          type: integer
      required:
        - date
        - championId1
        - championId2
      additionalProperties: false